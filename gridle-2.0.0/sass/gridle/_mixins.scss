// |------------------------------------------------------
// |------------------------------------------------------
// | Mixins
// |------------------------------------------------------
// |------------------------------------------------------


//
// Init
// called by _gridle_call mixin multiple times
//
@mixin gridle_init() {
	@if $_gridle_inited == false {
		$_gridle_inited : true !global;
		@each $stateName, $state in $_gridle_states {
			$classes : gridle_get_state_var(classes, $state);
			@if $classes {
				@at-root (without:all) {
					$q : gridle_get_media_query($state);
					@if $q {
						@media #{$q} {
							@include _gridle_init_common_silent_classes($state);
						}
					} @else {
						@include _gridle_init_common_silent_classes($state);
					}
				}
			}
		}
	}
}


//
// Init silent classes
//
@mixin _gridle_common_silent_class_name(
	$for,
	$stateName : default
) {
	@if mixin-exists('_gridle_common_#{$for}') {
		%#{$stateName}-#{$for} {
			// inject content
			@content;
			// extend common class by the registered css
			@include _gridle_extend_common_class($for, $stateName);
		}
		@at-root (without: media) {
			%at-root-#{$stateName}-#{$for} {
				// inject content
				@content;
				// extend common class by the registered css
				@include _gridle_extend_common_class($for, $stateName);
			}
		}
	}
}
@mixin _gridle_init_common_silent_classes(
	$state : default
) {
	// get state name
	$stateName : gridle_get_state_var(name, $state);

	// container
	@include _gridle_common_silent_class_name(container, $stateName) {
		@include _gridle_common_container($state);
	}

	// order
	@include _gridle_common_silent_class_name(grid-order, $stateName) {
		@include _gridle_common_grid_order($state);
	}

	// row
	@include _gridle_common_silent_class_name(row, $stateName) {
		@include _gridle_common_row($state);
	}

	// row-full
	@include _gridle_common_silent_class_name(row-full, $stateName) {
		@include _gridle_common_row_full($state);
	}

	// col
	@include _gridle_common_silent_class_name(col, $stateName) {
		@include _gridle_common_col($state);
	}

	// grid
	@include _gridle_common_silent_class_name(grid, $stateName) {
		@include _gridle_common_grid($state);
	}

	// grid-table
	@include _gridle_common_silent_class_name(grid-table, $stateName) {
		@include _gridle_common_grid_table($state);
	}

	// grid-adapt
	@include _gridle_common_silent_class_name(grid-adapt, $stateName) {
		@include _gridle_common_grid_adapt($state);
	}

	// grid-grow
	@include _gridle_common_silent_class_name(grid-grow, $stateName) {
		@include _gridle_common_grid_grow($state);
	}

	// push
	@include _gridle_common_silent_class_name(push, $stateName) {
		@include _gridle_common_push($state);
	}

	// pull
	@include _gridle_common_silent_class_name(pull, $stateName) {
		@include _gridle_common_pull($state);
	}

	// prefix
	@include _gridle_common_silent_class_name(prefix, $stateName) {
		@include _gridle_common_prefix($state);
	}

	// suffix
	@include _gridle_common_silent_class_name(suffix, $stateName) {
		@include _gridle_common_suffix($state);
	}

	// nowrap
	@include _gridle_common_silent_class_name(nowrap, $stateName) {
		@include _gridle_common_nowrap($state);
	}

	// wrap
	@include _gridle_common_silent_class_name(wrap, $stateName) {
		@include _gridle_common_wrap($state);
	}

	// clear-each
	@include _gridle_common_silent_class_name(clear-each, $stateName) {
		@include _gridle_common_clear_each($state);
	}

	// centered
	@include _gridle_common_silent_class_name(grid-centered, $stateName) {
		@include _gridle_common_grid_centered($state);
	}

	// align
	@include _gridle_common_silent_class_name(row-align, $stateName) {
		@include _gridle_common_row_align($state);
	}

	// hide
	@include _gridle_common_silent_class_name(hide, $stateName) {
		@include _gridle_common_hide($state);
	}

	// not-visible
	@include _gridle_common_silent_class_name(not-visible, $stateName) {
		@include _gridle_common_not_visible($state);
	}

	// show
	@include _gridle_common_silent_class_name(show, $stateName) {
		@include _gridle_common_show($state);
	}

	// show-inline
	@include _gridle_common_silent_class_name(show-inline, $stateName) {
		@include _gridle_common_show_inline($state);
	}

	// visible
	@include _gridle_common_silent_class_name(visible, $stateName) {
		@include _gridle_common_visible($state);
	}

	// float
	@include _gridle_common_silent_class_name(float, $stateName) {
		@include _gridle_common_float($state);
	}

	// clear
	@include _gridle_common_silent_class_name(clear, $stateName) {
		@include _gridle_common_clear($state);
	}

	// no-gutter
	@include _gridle_common_silent_class_name(no-gutter, $stateName) {
		@include _gridle_common_no_gutter($state);
	}

	// gutter
	@include _gridle_common_silent_class_name(gutter, $stateName) {
		@include _gridle_common_gutter($state);
	}

	// row debug
	@include _gridle_common_silent_class_name(row-debug, $stateName) {
		@include _gridle_common_row_debug($state);
	}
}


//
// Wrap gridle mixin content to init if needed and then extend if needed
//			
@mixin _gridle_call(
	$for : null
) {
	// init if needed
	@include gridle_init();

	// put content
	@content;

	// extend and apply css for different states
	@if $for {
		@include _gridle_extend($for);
		@if _gridle_is_in_generate_phase() == false {
			@include _gridle_apply_css_for($for);
		}
	}
}


//
// Extend
// @stateContext
// @calledBy 		_gridle_call
//
@mixin _gridle_extend(
	$for
) {
	// check if we need the state classes
	$states-classes : gridle_get_state_var(states-classes);

	// extend the "at-root" version for the .state-{stateName} classes
	@if $states-classes and str-index(#{&}, unquote(".state-#{$_gridle_current_stateName}")) {
		@at-root (without: media) {
			// @debug("%at-root-#{$_gridle_current_stateName}-#{$for}");
			@extend %at-root-#{$_gridle_current_stateName}-#{$for} !optional;
		}
	} @else {
		// extend using the current state name set in each gridle_state call
		// @debug("%#{$_gridle_current_stateName}-#{$for}");
		@extend %#{$_gridle_current_stateName}-#{$for} !optional;
	}
}


//
// Apply the registered css for a certain type (grid, push, etc...)
// in each states
//
$_gridle_applied_for : ();
@mixin _gridle_apply_css_for(
	$_for
) {
	$selector : "#{&}-#{$_for}"; // generate a unique name that will be stacked in a map to generate only 1 time 
	@if map-get($_gridle_applied_for, $selector) == null {
		$_gridle_applied_for : map-set($_gridle_applied_for, $selector, true) !global;
		$fors-patterns : $_gridle-packages;
		@each $map in $_gridle_apply_css_for {
			@each $stateName, $fors in $map {
				$rules : map-get($fors, $_for);
				@if $rules and map-get($fors-patterns, $_for) {
					@at-root (without : media) {
						@include _gridle_state($stateName, true, false) {
							@include gridle_use_state($stateName) {
								@include _gridle_map_2_css($rules);
							}
						}
					}
				}
			}
		}
	}
}


//
// Gridle state
//
// @param 	string|map|list 	$states 		A list of states, a state name or a state map
// @param 	boolean 			$has-parent 	Mostly always true, mean that the mixin is used in a css selector and not in css root level
//
@mixin _gridle_state(
	$state : default,
	$has-parent : true,
	$track-current-state : true
) {

	// variables :
	$state : gridle_get_state($state);
	$states-classes : gridle_get_state_var(states-classes, $state);
	$stateName : gridle_get_state_var(name, $state);

	// check if need to tack the current state
	@if $track-current-state {
		// save current state
		$_gridle_current_state : $state !global;
		$_gridle_current_stateName : $stateName !global;
	}

	// check if is a state :
	@if ($states-classes)
		and $stateName {
		// html class :
		@at-root (without: media) {
			@if $has-parent {
				.state-#{$stateName} & { 
					@content;
				}
			} @else {
				.state-#{$stateName} {
					@content;
				}
			}
		}
	}

	// get the media query :
	$q : gridle_get_media_query($state);

	// make the media query if a query exist :
	@if $q {
		@media #{$q} {
			@content;
		}
	} @else {
		@content;
	}

	// reset current state to default
	@if $track-current-state {
		$_gridle_current_state : $_gridle_settings !global;
		$_gridle_current_stateName : default !global;
	}
}


//
// Transform map to css
//
@mixin _gridle_map_2_css(
	$map
) {
	@each $key, $value in $map {
		@if type-of($value) == map {
			&#{$key} {
				@each $k, $v in $value {
					@if $k != null and str-index($k, gridle) and mixin-exists($k) {
						$set-name : str-replace($k, "gridle_", "");
						$set-name : str-replace($set-name, "_", "-", 1);
						@include _gridle_set((
							$set-name : $v
						));
					} @else {
						#{$k}:#{$v};
					}
				}
			}
		} @else {
			@if $key != null and str-index($key, gridle) and mixin-exists($key) {
				$set-name : str-replace($key, "gridle_", "");
				$set-name : str-replace($set-name, "_", "-", 1);
				@include _gridle_set((
					$set-name : $value
				));
			} @else {
				#{$key}:#{$value};
			}
		}
	}
}

//
// Extend common class
//
@mixin _gridle_extend_common_class(
	$what,
	$state : default
) {
	// extend
	$stateName : gridle_get_state_var(name, $state);
	$extend : gridle_get_extend_class_map($what, $stateName);
	@if $extend != null {
		@include _gridle_map_2_css($extend);
	}
}